JUnit é um framework de testes unitários para linguagem Java, para desenvolver testes unitários apoiada pela técnica de TDD.
É uma ferramenta open source que provê anotações para identificar testes, asserções(validações para garantir os resultados
esperados e uma série de funcionalidadades para suportar a criação e execução de testes.
*Anatomia de um método de teste
-> Um teste é na verdade um método dentro de uma classe Java
Todo teste deve ser identificado com a anotação @Test e o método deve ser público, sem retorno (void) e ter um nome.
Podemos dar o nome que desejarmos para o método.
*Dica Rápida -> Exibição de Código
Window->Perspective->Reset Pesrpective..
*Exercício1
Criar um método de teste chamado teste1
Dentro do método de teste, escrever o seguinte código: 
System.out.println("Teste1 executado."); 
RESPOSTA:
package exercicio1;
import org.junit.Test;
public class MeuPrimeiroTeste{
  @Test
   public void teste1(){
       Systee
}
}

*Execução dos testes, há três indicativos
->Succeso na cor verde: Quando os testes executam com sucesso.
->Erro na cor vermelha: Quando algum erro (de lógica ou exceção) ocorre.
->Falha na cor azul: Quando uma falha na valdação de resultados ocorre.
*Validações
-> Que serão inseridas para garantir que um resultado obtido é igual ao resultado esperado chama-se asserção.
-> As asserções(ou assertions) irão nos dar a certeza do resultado apresentando um resultado positivo ou negativo
(sucesso ou falha). É necessário importar estaticamente a classe de asserção. É feita no bloco de importação
(depois da palavras packege e antes da palvra public class.
O método de validação de verdairo/falso chama-se:
->assertTrue e => asserfalse.
*Validação por Igualdade chama-se
-> assertEquals, no qual recebe dois parâmetros: 
->resultado esperado
->resultado obtido 
... e mostra sucesso ou falha na comparação
O assertEquals é capaz de validar tipos de dados como string (texto),
 números (inteiros, float, double) e objetos
Quando um erro ocorre na validação por igualdade ocorrer a diferença entre a comparação será exibida no
FailureTrace através de um item chamado org.junit.ComparisonFailure

*O que são Pré e Pós condições
-> São execuções de alguma ação antes ou depois de cada teste, é comum para os scripts de testes
como criação de dados; abrir e fechar um browser web, etc.

**Pré Condição que será executado antes do teste.
->É necessário:
->Criar um método público e sem retorno (public void)
->Inserir a a  otação @Before acima do método.
**Pós Condição que será executado depois do teste
-> É necessário:
->Criar um método público e sem retorno (public void)
->Inserir a anotação @After acima do método
->Sua sáida no console é:
=>Executou a pre condicao
=>Executou o teste
=>Executou a pos condicao
***Curiosidade
Você pode encontar testes onde o método de pré condição estará com o nome setup 
e o de pós condição com o nome tearDown, tudo porque na versão anterior do JUnit não existiam as anotações 
para informar a pré e pós condições, logo eram tratadas com estes nomes.

@BeforClass e @AfterClass que são duas outras formas de pré e pós condições:
=>Execução de ações antes ou depois da execução da classe de teste.
O método para ambas as condições deve ser público, estático e sem retorno (public static void)

**Suíte de Teste
->Uma suíte de testes é um conjunto de testes que serão executados com uma única finalidade.
->A criação de uma suíte resolve o problema de execução de diversos testes, um por um, para 
que todos os testes sejam executados.
->É recomendada a criação de suítes para facilitar a execução dps testes automatizados.
***Como criar uma Suíte de Teste
->No JUnit, a suíte é uma classe vazia, ou seja, sem a necessidade de ter métodos de teste.
-->Esta classe deve possuir duas anotações:
-->@RunWith --> anotação que deve ser colocada acima do nome da classe para informar ao JUnit
 que a execução irá disparar diversos testes.
-->@SuiteClasses --> anotação que deve ser colocada acima do nome da classe para informar ao JUnit 
 quais são os testes que serão executados.
A anotação @Runwith deve conter o parâmetro Suite.class
Exemplo: -> @RunWith(Suite.class)
	     public class SuitedeTeste{
	    }
A anotação @SuiteClass deve conter como parâmetro a lista de classes de testes que serão executadas.
As classes devem estar entre chaves {}, possuir a extensão .class e estarem separadas por vírgula.

**Data Driven Testing
É um termo utilizado para descrever testes usando uma mesma fonte de dados, onde estes serão executados de forma automática
dado a quantidade dados existentes na fonte de dados.
Exemplo: Se eu tenho uma fonte de dados co  5 registros, o teste irá executar 5 vezez de forma automática, sendo uma execução
para cada registro contido fonte de dados.
***Sem Data Drivem
-> Temos de criar um teste para verificar se uma pessoa pode ou não votar, dado o seu ano de nascimento, ou seja aplicando
uma tabela de decisão podemos termos vários testes (@Test) em uma classe de teste, o código poderar ser bem grande e sua 
mautenção mais demorada apesar de ser válida tal aplicação.
PAREI NO DATA DRIVEN 57
